#!/usr/bin/env node

const path = require('path');
const util = require('util');
const fs = require('fs');
const exec = require('child_process').exec;

const scriptLocation = path.resolve(__dirname);
const rootLocation = path.resolve(scriptLocation, '..', '..');
const rendererLocation = path.resolve(rootLocation, 'lib', 'renderer');
const generatedFileLocation = path.resolve(rendererLocation, 'preprocessor', 'gen', 'raw_shaders.dart');

// Find all .frag and .vert files under the renderer directory
const findShaderFiles = (dir) => {
  const files = fs.readdirSync(dir, { withFileTypes: true, recursive: true });
  return files
    .filter(file => file.isFile() && (file.name.endsWith('.frag') || file.name.endsWith('.vert')))
    .map(file => path.join(file.parentPath, file.name));
}

const findPreludeShaderFiles = (dir) => {
  const files = fs.readdirSync(dir, { withFileTypes: true, recursive: true });
  return files
    .filter(file => file.isFile() && (file.name.endsWith('.glsl')))
    .map(file => path.join(file.parentPath, file.name));
}

const indent = (str, spaces = 2) => {
  const space = ' '.repeat(spaces);
  return str.split('\n').map(line => space + line).join('\n');
}

const preludes = {}
for (const preludeShaderFile of findPreludeShaderFiles(rendererLocation)) {
  const fileName = path.basename(preludeShaderFile).split('.')[0];
  preludes[fileName] = fs.readFileSync(preludeShaderFile)
}

const code = []
code.push('// GENERATED CODE - DO NOT MODIFY BY HAND');
code.push('// Generated by tool/renderer/generate.js');
code.push('');
code.push('// ignore_for_file: constant_identifier_names');
code.push('');
code.push('// dart format off');
code.push('');
code.push('class RawShaders {');

for (const file of findShaderFiles(rendererLocation)) {
  const fileName = path.basename(file).split('.')[0];
  const fileExtension = path.extname(file).slice(1);

  const shaderCode = fs.readFileSync(file, 'utf8').split('\n');
  const newShaderCode = [];
  // Find lines starting with `#pragma prelude: `
  for (var i = 0; i < shaderCode.length; i++) {
    if (shaderCode[i].startsWith('#pragma prelude: ')) {
      const preludeName = shaderCode[i].split(' ')[2];
      newShaderCode.push(preludes[preludeName]);
    }
    else {
      newShaderCode.push(shaderCode[i]);
    }
  }

  code.push(`static const String ${fileName}_${fileExtension} = '''`);
  code.push(newShaderCode.join('\n').replaceAll('\\', '\\\\'));
  code.push(`''';`);
  code.push('');
}
code.push('}');

// Write the generated code to the output file
fs.writeFileSync(generatedFileLocation, code.join('\n'), 'utf8');